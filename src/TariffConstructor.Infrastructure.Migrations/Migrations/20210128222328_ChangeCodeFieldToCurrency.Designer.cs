// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TariffConstructor.Infrastructure.Data;

namespace TariffConstructor.Infrastructure.Migrations.Migrations
{
    [DbContext(typeof(TariffConstructorContext))]
    [Migration("20210128222328_ChangeCodeFieldToCurrency")]
    partial class ChangeCodeFieldToCurrency
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoFor", "'DBSequenceHiLoFor', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForApplication", "'DBSequenceHiLoForApplication', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForApplicationSetting", "'DBSequenceHiLoForApplicationSetting', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForApplicationSettingPreset", "'DBSequenceHiLoForApplicationSettingPreset', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForApplicationSettingSet", "'DBSequenceHiLoForApplicationSettingSet', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForApplicationSettingValue", "'DBSequenceHiLoForApplicationSettingValue', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForAvailableProductOptionTariffInTariff", "'DBSequenceHiLoForAvailableProductOptionTariffInTariff', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForAvailableTariffForUpgrade", "'DBSequenceHiLoForAvailableTariffForUpgrade', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForBillingSetting", "'DBSequenceHiLoForBillingSetting', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForBillingSettingPreset", "'DBSequenceHiLoForBillingSettingPreset', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForBillingSettingSet", "'DBSequenceHiLoForBillingSettingSet', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForContractKind", "'DBSequenceHiLoForContractKind', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForCurrency", "'DBSequenceHiLoForCurrency', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForIncludedProductInTariff", "'DBSequenceHiLoForIncludedProductInTariff', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForIncludedProductOptionInTariff", "'DBSequenceHiLoForIncludedProductOptionInTariff', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForProduct", "'DBSequenceHiLoForProduct', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForProductOption", "'DBSequenceHiLoForProductOption', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForProductOptionKind", "'DBSequenceHiLoForProductOptionKind', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForProductOptionTariff", "'DBSequenceHiLoForProductOptionTariff', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForProductOptionTariffPrice", "'DBSequenceHiLoForProductOptionTariffPrice', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForSetting", "'DBSequenceHiLoForSetting', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForSettingEnumValue", "'DBSequenceHiLoForSettingEnumValue', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForTariff", "'DBSequenceHiLoForTariff', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForTariffAdvancePrice", "'DBSequenceHiLoForTariffAdvancePrice', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForTariffPrice", "'DBSequenceHiLoForTariffPrice', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForTariffToContractKindBinding", "'DBSequenceHiLoForTariffToContractKindBinding', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.DBSequenceHiLoForTermsOfUse", "'DBSequenceHiLoForTermsOfUse', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationModel.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForApplication")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasFilter("[PublicId] IS NOT NULL");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForApplicationSetting")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(68)")
                        .HasMaxLength(68);

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("ApplicationId", "SettingId");

                    b.HasIndex("SettingId");

                    b.ToTable("ApplicationSetting");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForApplicationSettingPreset")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SettingsPresetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("ApplicationSettingId", "SettingsPresetId");

                    b.HasIndex("SettingsPresetId");

                    b.ToTable("ApplicationSettingPreset");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForApplicationSettingSet")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<int>("SettingsSetId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ApplicationSettingId", "SettingsSetId");

                    b.HasIndex("SettingsSetId");

                    b.ToTable("ApplicationSettingSet");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForApplicationSettingValue")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<int?>("ApplicationSettingId2")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("ApplicationSettingId");

                    b.HasIndex("ApplicationSettingId2");

                    b.ToTable("ApplicationSettingValue");
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForBillingSetting")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("SettingId", "PublicId");

                    b.ToTable("BillingSetting");
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSettingPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForBillingSettingPreset")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BillingSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("SettingsPresetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("BillingSettingId", "SettingsPresetId");

                    b.HasIndex("SettingsPresetId");

                    b.ToTable("BillingSettingPreset");
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSettingSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForBillingSettingSet")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BillingSettingId")
                        .HasColumnType("int");

                    b.Property<int>("SettingsSetId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasAlternateKey("SettingsSetId", "BillingSettingId");

                    b.HasIndex("BillingSettingId");

                    b.ToTable("BillingSettingSet");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ContractKindModel.ContractKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForContractKind")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasFilter("[PublicId] IS NOT NULL");

                    b.ToTable("ContractKind");
                });

            modelBuilder.Entity("TariffConstructor.Domain.CurrencyModel.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForCurrency")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.HasKey("Id");

                    b.HasIndex("Code", "Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductModel.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NomenclatureId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("ProductSettlementKinds")
                        .HasColumnType("tinyint");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(68)")
                        .HasMaxLength(68);

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("PublicId");

                    b.HasIndex("TenantId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionKindModel.ProductOptionKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductOptionKind");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionModel.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AccountingName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("bit");

                    b.Property<int?>("KindId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NomenclatureId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KindId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductOption");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForProductOptionTariff")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductOptionTariff");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariffPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForProductOptionTariffPrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductOptionTariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionTariffId");

                    b.ToTable("ProductOptionTariffPrice");
                });

            modelBuilder.Entity("TariffConstructor.Domain.SettingModel.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForSetting")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsComputing")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("TariffConstructor.Domain.SettingModel.SettingEnumValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForSettingEnumValue")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.ToTable("SettingEnumValue");
                });

            modelBuilder.Entity("TariffConstructor.Domain.SettingModel.SettingsPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoFor")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("SettingsPreset");
                });

            modelBuilder.Entity("TariffConstructor.Domain.SettingModel.SettingsSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoFor")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.HasKey("Id");

                    b.ToTable("SettingsSet");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.AvailableProductOptionTariffInTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductOptionTariffId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionTariffId");

                    b.HasIndex("TenantId");

                    b.ToTable("AvailableProductOptionTariffInTariff");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.AvailableTariffForUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("FromTariffId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("ToTariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AvailableTariffForUpgrade");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.IncludedProductInTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RelativeWeight")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TariffId");

                    b.ToTable("IncludedProductInTariff");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.IncludedProductOptionInTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductOptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionId");

                    b.HasIndex("TariffId");

                    b.ToTable("IncludedProductOptionInTariffs");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("AccountingName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AccountingTariffId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AwaitingPaymentStrategy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAcceptanceRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGradualFinishAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SettingsPresetId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TermsOfUseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("PublicId");

                    b.HasIndex("TenantId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffAdvancePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffAdvancePrice");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffPrice");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffToContractKindBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTariffAdvancePrice")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("ContractKindId")
                        .HasColumnType("int");

                    b.Property<int>("TariffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractKindId");

                    b.HasIndex("TariffId");

                    b.ToTable("TariffToContractKindBinding");
                });

            modelBuilder.Entity("TariffConstructor.Domain.TermsOfUseModel.TermsOfUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "DBSequenceHiLoForTermsOfUse")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasFilter("[PublicId] IS NOT NULL");

                    b.ToTable("TermsOfUses");
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ApplicationModel.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.SettingModel.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingPreset", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.SettingModel.SettingsPreset", null)
                        .WithMany("ApplicationSettingPresets")
                        .HasForeignKey("SettingsPresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TariffConstructor.Domain.SettingModel.SettingPresetValue", "Value", b1 =>
                        {
                            b1.Property<int>("ApplicationSettingPresetId")
                                .HasColumnType("int");

                            b1.Property<string>("DefaultValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MaxValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MinValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationSettingPresetId");

                            b1.ToTable("ApplicationSettingPreset");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationSettingPresetId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingSet", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.SettingModel.SettingsSet", null)
                        .WithMany("ApplicationSettingSets")
                        .HasForeignKey("SettingsSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSettingValue", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.ApplicationSettingModel.ApplicationSetting", null)
                        .WithMany("SettingValues")
                        .HasForeignKey("ApplicationSettingId2");
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSetting", b =>
                {
                    b.HasOne("TariffConstructor.Domain.SettingModel.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSettingPreset", b =>
                {
                    b.HasOne("TariffConstructor.Domain.BillingSettingModel.BillingSetting", "BillingSetting")
                        .WithMany()
                        .HasForeignKey("BillingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.SettingModel.SettingsPreset", null)
                        .WithMany("BillingSettingPresets")
                        .HasForeignKey("SettingsPresetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TariffConstructor.Domain.SettingModel.SettingPresetValue", "Value", b1 =>
                        {
                            b1.Property<int>("BillingSettingPresetId")
                                .HasColumnType("int");

                            b1.Property<string>("DefaultValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MaxValue")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MinValue")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BillingSettingPresetId");

                            b1.ToTable("BillingSettingPreset");

                            b1.WithOwner()
                                .HasForeignKey("BillingSettingPresetId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.BillingSettingModel.BillingSettingSet", b =>
                {
                    b.HasOne("TariffConstructor.Domain.BillingSettingModel.BillingSetting", "BillingSetting")
                        .WithMany()
                        .HasForeignKey("BillingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.SettingModel.SettingsSet", null)
                        .WithMany("BillingSettingSets")
                        .HasForeignKey("SettingsSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionModel.ProductOption", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductOptionKindModel.ProductOptionKind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId");

                    b.HasOne("TariffConstructor.Domain.ProductModel.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariff", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductOptionModel.ProductOption", "ProductOption")
                        .WithMany()
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariffPrice", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariff", "ProductOptionTariff")
                        .WithMany("Prices")
                        .HasForeignKey("ProductOptionTariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<int>("ProductOptionTariffPriceId")
                                .HasColumnType("int");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(3)")
                                .HasMaxLength(3);

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductOptionTariffPriceId");

                            b1.ToTable("ProductOptionTariffPrice");

                            b1.WithOwner()
                                .HasForeignKey("ProductOptionTariffPriceId");
                        });

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.ProlongationPeriod", "Period", b1 =>
                        {
                            b1.Property<int>("ProductOptionTariffPriceId")
                                .HasColumnType("int");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("ProductOptionTariffPriceId");

                            b1.ToTable("ProductOptionTariffPrice");

                            b1.WithOwner()
                                .HasForeignKey("ProductOptionTariffPriceId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.SettingModel.SettingEnumValue", b =>
                {
                    b.HasOne("TariffConstructor.Domain.SettingModel.Setting", null)
                        .WithMany("EnumValues")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.AvailableProductOptionTariffInTariff", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductOptionTariffModel.ProductOptionTariff", "ProductOptionTariff")
                        .WithMany()
                        .HasForeignKey("ProductOptionTariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.IncludedProductInTariff", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductModel.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.TariffModel.Tariff", "Tariff")
                        .WithMany("IncludedProducts")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.IncludedProductOptionInTariff", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ProductOptionModel.ProductOption", "ProductOption")
                        .WithMany()
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.TariffModel.Tariff", "Tariff")
                        .WithMany("IncludedProductOptions")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.Tariff", b =>
                {
                    b.OwnsOne("TariffConstructor.Domain.TariffModel.TariffTestPeriod", "TestPeriod", b1 =>
                        {
                            b1.Property<int>("TariffId")
                                .HasColumnType("int");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("TariffId");

                            b1.ToTable("Tariffs");

                            b1.WithOwner()
                                .HasForeignKey("TariffId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffAdvancePrice", b =>
                {
                    b.HasOne("TariffConstructor.Domain.TariffModel.Tariff", "Tariff")
                        .WithMany("AdvancePrices")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<int>("TariffAdvancePriceId")
                                .HasColumnType("int");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(3)")
                                .HasMaxLength(3);

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TariffAdvancePriceId");

                            b1.ToTable("TariffAdvancePrice");

                            b1.WithOwner()
                                .HasForeignKey("TariffAdvancePriceId");
                        });

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.ProlongationPeriod", "Period", b1 =>
                        {
                            b1.Property<int>("TariffAdvancePriceId")
                                .HasColumnType("int");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("TariffAdvancePriceId");

                            b1.ToTable("TariffAdvancePrice");

                            b1.WithOwner()
                                .HasForeignKey("TariffAdvancePriceId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffPrice", b =>
                {
                    b.HasOne("TariffConstructor.Domain.TariffModel.Tariff", "Tariff")
                        .WithMany("Prices")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.Price", "Price", b1 =>
                        {
                            b1.Property<int>("TariffPriceId")
                                .HasColumnType("int");

                            b1.Property<string>("Currency")
                                .HasColumnType("nvarchar(3)")
                                .HasMaxLength(3);

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("TariffPriceId");

                            b1.ToTable("TariffPrice");

                            b1.WithOwner()
                                .HasForeignKey("TariffPriceId");
                        });

                    b.OwnsOne("TariffConstructor.Domain.ValueObjects.ProlongationPeriod", "Period", b1 =>
                        {
                            b1.Property<int>("TariffPriceId")
                                .HasColumnType("int");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("TariffPriceId");

                            b1.ToTable("TariffPrice");

                            b1.WithOwner()
                                .HasForeignKey("TariffPriceId");
                        });
                });

            modelBuilder.Entity("TariffConstructor.Domain.TariffModel.TariffToContractKindBinding", b =>
                {
                    b.HasOne("TariffConstructor.Domain.ContractKindModel.ContractKind", "ContractKind")
                        .WithMany()
                        .HasForeignKey("ContractKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TariffConstructor.Domain.TariffModel.Tariff", null)
                        .WithMany("ContractKindBindings")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
